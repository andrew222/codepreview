<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.3.2">

    <issue
        id="ResAuto"
        severity="Fatal"
        message="In Gradle projects, always use `http://schemas.android.com/apk/res-auto` for custom attributes"
        category="Correctness"
        priority="9"
        summary="Hardcoded Package in Namespace"
        explanation="In Gradle projects, the actual package used in the final APK can vary; for example,you can add a `.debug` package suffix in one version and not the other. Therefore, you should *not* hardcode the application package in the resource; instead, use the special namespace `http://schemas.android.com/apk/res-auto` which will cause the tools to figure out the right namespace for the resource regardless of the actual package used during the build."
        errorLine1="        xmlns:tlv=&quot;http://schemas.android.com/apk/res/com.ghostsq.commander&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/layout/tblist.xml"
            line="4"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sorting_vals`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;sorting_vals&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="9"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`panels_mode_vals`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;panels_mode_vals&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="20"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`font_size`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;font_size&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="25"
            column="19"/>
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="313"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`language`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;language&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="41"
            column="19"/>
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="355"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`language_vals`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;language_vals&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="59"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`encoding`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;encoding&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="77"
            column="19"/>
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="382"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`encoding_vals`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;encoding_vals&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/lists.xml"
            line="93"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`empty_string`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;empty_string&quot;>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="3"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`just_dash`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;just_dash&quot;> - &lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="4"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`r_bit`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;r_bit&quot;>r&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="5"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`w_bit`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;w_bit&quot;>w&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="6"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`x_bit`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;x_bit&quot;>x&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`s_bit`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;s_bit&quot;>s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="8"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`t_bit`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;t_bit&quot;>t&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`zero_percent`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;zero_percent&quot;>0%&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`r_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;r_title&quot;>R&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`g_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;g_title&quot;>G&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="12"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`b_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;b_title&quot;>B&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/static.xml"
            line="13"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`app_name`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;resources>&lt;string name=&quot;app_name&quot;>Ghost Commander&lt;/string>"
        errorLine2="                   ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="2"
            column="20"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`oth_sh_dir`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;oth_sh_dir&quot;>Open \&quot;%s\&quot; in other panel&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="20"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`change`&quot; is not translated in &quot;da&quot; (Danish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;change&quot;>Toggle&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tgl`&quot; is not translated in &quot;da&quot; (Danish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;tgl&quot;>Toggle&lt;/string>"
        errorLine2="        ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="23"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`swap`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;swap&quot;>Swap&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`home`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;home&quot;>Home&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sdcard`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sdcard&quot;>/sdcard&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="29"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`softkbd`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;softkbd&quot;>Keyboard&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="30"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`enter_b`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;enter_b&quot;>Location&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`add_fav`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;add_fav&quot;>Add to favorites&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="32"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`add_fav_b`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;add_fav_b&quot;>Add fave&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remount_b`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;remount_b&quot;>Remount /system&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remount`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;remount&quot;>Remount&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`hidden`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;hidden&quot;>Hidden&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="36"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rescan`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rescan&quot;>Rescan media&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`favs`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;favs&quot;>Favorites&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="38"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`local`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;local&quot;>Local storage&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`external`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;external&quot;>External card&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="40"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`media`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;media&quot;>Media Store&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`saf`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;saf&quot;>Storage Access Framework&lt;/string>"
        errorLine2="        ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="42"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp&quot;>FTP site&lt;/string>"
        errorLine2="        ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="43"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sftp`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sftp&quot;>SFTP site&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="44"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`smb`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;smb&quot;>Windows share&lt;/string>"
        errorLine2="        ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="45"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`plugins`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;plugins&quot;>Browse plugins&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="46"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`root`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;root&quot;>Root mode&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mount`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;mount&quot;>Mount points&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="48"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mount_b`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;mount_b&quot;>Mounts&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="49"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`apps`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;apps&quot;>Applications&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="50"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`exit`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;exit&quot;>Exit&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="51"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`forget`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;forget&quot;>Forget account (app exits)&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`favs_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;favs_descr&quot;>View and manage your list of favorite folders and sites&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="53"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`local_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;local_descr&quot;>Browse, organize and modify the contents of the primary file system&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`external_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;external_descr&quot;>Access files on the physically inserted SD card. It may be read-only on some devices&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="55"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`media_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;media_descr&quot;>Make modifications on the external SD card via the MediaStore interface&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="56"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`saf_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;saf_descr&quot;>Modify the external SD card via the Storage Access Framework interface&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="57"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp_descr&quot;>Connect to an FTP server&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="58"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sftp_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sftp_descr&quot;>Connect to an SSH FTP (sftp) server&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="59"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`smb_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;smb_descr&quot;>Connect to shared folders on a Windows machine&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`plugins_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;plugins_descr&quot;>Look for more Ghost Commander plugins&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="61"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`root_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;root_descr&quot;>For rooted devices only: manage critical system files. Only proceed if you know what you\&apos;re doing.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="62"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mount_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;mount_descr&quot;>Display a list of all mount points. Remount them to \&quot;rw\&quot; mode, then back to \&quot;ro\&quot; mode after changes. Proceed with caution.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="63"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`apps_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;apps_descr&quot;>View and manage installed packages&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="64"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`exit_descr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;exit_descr&quot;>Close the application&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="65"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`shortcut`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;shortcut&quot;>Add shortcut&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="66"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`enter_smb`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;enter_smb&quot;>Connect to Windows PC&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="68"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_file`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;search_file&quot;>Search&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="69"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`menu`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;menu&quot;>Menu&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="70"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sort_by_ext`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sort_by_ext&quot;>By Extension&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="72"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sort_by_ext_b`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sort_by_ext_b&quot;>By Ext&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="76"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`select_b`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;select_b&quot;>Select&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="81"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`unselect_b`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;unselect_b&quot;>Unselect&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="82"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`toggle_panels_mode`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;toggle_panels_mode&quot;>Change panels mode&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="83"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`save_prefs`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;save_prefs&quot;>Back up settings&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="85"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rest_prefs`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rest_prefs&quot;>Restore settings&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="86"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`save_log`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;save_log&quot;>Save log to file&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="87"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_saved`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;prefs_saved&quot;>Your preferences have been saved&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="88"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_restr`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;prefs_restr&quot;>Your preferences have been restored&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="89"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`new_folder`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;new_folder&quot;>Create a new folder&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="93"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`new_zip`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;new_zip&quot;>Create a new ZIP file&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="94"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`open_with`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;open_with&quot;>Open with…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="98"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`open`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;open&quot;>Open&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="99"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`copy_name`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;copy_name&quot;>Copy name to clipboard&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="100"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fav_fld`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fav_fld&quot;>Add \&quot;%s\&quot; to favorites&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="101"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`create_zip`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;create_zip&quot;>Create a new ZIP file&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="102"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`create_zip_title`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;create_zip_title&quot;>Create ZIP file&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="103"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`extract_zip`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;it&quot; (Italian), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;extract_zip&quot;>Extract ZIP&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="104"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`wait`&quot; is not translated in &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;wait&quot;>wait…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="105"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fail`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fail&quot;>FAILED&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="106"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`failed`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;failed&quot;>Error:\n&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="107"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`default_uri_cmnt`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;default_uri_cmnt&quot;>Default location&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="108"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`default_color`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;default_color&quot;>Default&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="109"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`base_color`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;base_color&quot;>Base color&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="110"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`typemasks`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;typemasks&quot;>File masks&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="111"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`color_sample`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;color_sample&quot;>Sample&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="112"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`add_new_type`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;add_new_type&quot;>Add new&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="113"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fav_comment`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fav_comment&quot;>Comment:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="114"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fav_dialog`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fav_dialog&quot;>Edit favorite&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="115"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_yes`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_yes&quot;>Yes&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="116"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_no`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_no&quot;>No&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="117"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_exit`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_exit&quot;>Exit&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="121"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_browse`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_browse&quot;>Browse&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="122"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_replace_all`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_replace_all&quot;>Replace all&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="126"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_skip_all`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_skip_all&quot;>Skip all&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="127"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_select`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_select&quot;>Select&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="128"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dialog_unselect`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dialog_unselect&quot;>Unselect&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="129"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`filemask`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;filemask&quot;>File mask:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="130"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`for_files`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;for_files&quot;>Files&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="131"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`for_dirs`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;for_dirs&quot;>Folders&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="132"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`in_subf`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;in_subf&quot;>Subdirs&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="133"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`content`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;content&quot;>Content:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="134"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`bigger_than`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;bigger_than&quot;>Bigger\nthan:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="135"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`smaller_than`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;smaller_than&quot;>Smaller\nthan:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="136"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mod_after`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;mod_after&quot;>After&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="137"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mod_before`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;mod_before&quot;>Before&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="138"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`launch`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;launch&quot;>Launch&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="139"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`operation`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;operation&quot;>Operations&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="140"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`view_title`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;view_title&quot;>View&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="141"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`newf_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;newf_title&quot;>Create file&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="143"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_title`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;search_title&quot;>Search&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="147"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_prompt`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;search_prompt&quot;>Search criteria:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="148"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`send_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;send_title&quot;>Send to…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="152"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`open_title`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;open_title&quot;>Open with…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="153"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`to_copy`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;to_copy&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="154"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`to_move`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;to_move&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="155"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`to_rename`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;to_rename&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="156"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`copy_err`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;copy_err&quot;>Nothing to copy&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="157"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`edit_err`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;edit_err&quot;>Not editable&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="159"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`inv_dest`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;inv_dest&quot;>Invalid destination&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="161"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`inv_path`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;inv_path&quot;>Invalid path&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="162"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`find_on_fs_only`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;find_on_fs_only&quot;>The search feature only works on the local file system&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="163"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`on_fs_only`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;on_fs_only&quot;>This feature only works on the local file system&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="164"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`op_not_alwd`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;op_not_alwd&quot;>Operation is not allowed - select something first&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="165"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`oper_item_to`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;oper_item_to&quot;>%1$s %2$s to:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="166"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rescan_q`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rescan_q&quot;>Are you sure you want to do the search again?&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="171"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_done`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;search_done&quot;>Search complete&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="172"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`done`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;done&quot;>Done&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="173"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`interrupted`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;interrupted&quot;>Interrupted&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="174"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_copy_to_itself`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_copy_to_itself&quot;>Cannot copy the directory \&quot;%s\&quot; to itself or below&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="175"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`nothing_found`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;nothing_found&quot;>No files found&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="177"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`copying`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;copying&quot;>Copying\n\&quot;%s\&quot;…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="179"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`copied_f`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;copied_f&quot;>Copied\n\&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="180"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`deleting`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;deleting&quot;>Deleting\n\&quot;%s\&quot;…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="181"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`deleting_a`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;deleting_a&quot;>Deleting…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="182"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fail_del`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fail_del&quot;>File &quot;%1$s\&quot; was not completed, deleting…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="183"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`unpacking`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;unpacking&quot;>Unpacking \n\&quot;%s\&quot;…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="184"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`unpacked_p`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;unpacked_p&quot;>Unpacked \n\&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="185"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`packing`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;packing&quot;>Packing \n\&quot;%s\&quot;…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="186"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`retrieving`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;retrieving&quot;>Retrieving…\n\&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="187"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`uploading`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;uploading&quot;>Uploading…\n\&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="188"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`uploaded_p`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;uploaded_p&quot;>Uploaded \n\&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="189"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`loading`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;loading&quot;>Loading…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="190"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`second`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;second&quot;>s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="191"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`canceled`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;canceled&quot;>Canceled&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="192"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`oom_err`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;oom_err&quot;>Out of memory&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="193"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`unkn_err`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;unkn_err&quot;>Unknown error&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="194"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_md`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_md&quot;>Unable to create directory \&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="195"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_cd`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_cd&quot;>Cannot browse the directory \&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="196"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`file_exist`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;file_exist&quot;>File \&quot;%s\&quot; already exists&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="197"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sec_err`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sec_err&quot;>Security issue\n%s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="198"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`not_accs`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;not_accs&quot;>File not accessible\n%s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="199"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`acc_err`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;acc_err&quot;>Access error on file \&quot;%1$s\&quot;\n %2$s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="200"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rtexcept`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rtexcept&quot;>Error on file \&quot;%1$s\&quot;\n %2$s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="201"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_move`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_move&quot;>Unable to move file \&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="202"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_create`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_create&quot;>Unable to create file \&quot;%1$s\&quot;\n%2$s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="203"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_del`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_del&quot;>Unable to delete \&quot;%1$s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="204"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dest_wrtble`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;dest_wrtble&quot;>Make sure the folder \&quot;%s\&quot; is writable&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="205"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`copied`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;copied&quot;>copied&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="206"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`moved`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;moved&quot;>moved&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="207"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`deleted`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;deleted&quot;>deleted&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="208"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`downloaded`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;downloaded&quot;>downloaded&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="209"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`uploaded`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;uploaded&quot;>uploaded&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="210"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`packed`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;packed&quot;>packed&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="211"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`unpacked`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;unpacked&quot;>unpacked&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="212"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remounted`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;remounted&quot;>Remounted \&quot;%1$s\&quot; to \&quot;%2$s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="213"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tried_to_exec`&quot; is not translated in &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;tried_to_exec&quot;>Tried to execute \&quot;%s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="214"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`verb_plural_sfx`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;verb_plural_sfx&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="215"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`item`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;item&quot;>item&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="216"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`items`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;items&quot;>items&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="217"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`items24`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;items24&quot;>&amp;#xA0;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="218"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`were`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;were&quot;>were&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="219"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`was`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;was&quot;>was&lt;/string>"
        errorLine2="        ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="220"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`nothing`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;nothing&quot;>Nothing&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="221"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`report_0`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;report_0&quot; >&lt;![CDATA[ Nothing was ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="223"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`report_1`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;report_1&quot; >&lt;![CDATA[ One item was ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="224"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`report_24`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;report_24&quot;>&amp;#xA0;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="225"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`report_m`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;report_m&quot; >&lt;![CDATA[ %1$d items were ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="226"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_folder`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_folder&quot;>&lt;![CDATA[&lt;b>Folder:&lt;/b> \&quot;%1$s\&quot;\n%2$d files ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="228"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_dirnum`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_dirnum&quot;>&lt;![CDATA[ in %1$d director%2$s]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="229"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_dirsfx_s`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_dirsfx_s&quot;>y&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="230"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_dirsfx_p`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_dirsfx_p&quot;>ies&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="231"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_file`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_file&quot;>&lt;![CDATA[&lt;b>File:&lt;/b> \&quot;%s\&quot;]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="232"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_files`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_files&quot;>&lt;![CDATA[&lt;b>Files:&lt;/b> %d ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="233"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_Nbytes`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_Nbytes&quot;>&lt;![CDATA[\n&lt;b>Size:&lt;/b> %1$s]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="234"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_bytes`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_bytes&quot;> (&lt;small>%db&lt;/small>)&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="235"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_lastmod`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_lastmod&quot;>&lt;![CDATA[\n&lt;b>Last modified:&lt;/b> ]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="236"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sz_total`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sz_total&quot;>&lt;![CDATA[&lt;b>Total:&lt;/b> %1$s\n&lt;b>Free:&lt;/b> %2$s]]>&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="237"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`busy`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;busy&quot;>Busy!&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="238"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`not_supported`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;not_supported&quot;>This operation is not supported&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="241"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`inprogress`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;inprogress&quot;>A file operation is in progress&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="249"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`active`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;active&quot;>Active&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="252"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`domain`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;domain&quot;>Domain:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="253"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`command`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;command&quot;>Command:&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="256"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`use_busybox`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;use_busybox&quot;>busybox&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="257"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`user`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;user&quot;>User&lt;/string>"
        errorLine2="        ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="258"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`group`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;group&quot;>Group&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="259"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`other`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;other&quot;>Other&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="260"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp_connected`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp_connected&quot;>Connected to \&quot;%1$s\&quot;,\n Logged in as \&quot;%2$s\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="263"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp_upload_failed`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp_upload_failed&quot;>Uploading \&quot;%1$s\&quot; failed.\n FTP log:\n\n%2$s&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="264"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp_mkdir_failed`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp_mkdir_failed&quot;>Failed to create folder \&quot;%1$s\&quot;.\n FTP log:\n\n\&quot;%2$s\&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="265"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ftp_nologin`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ftp_nologin&quot;>Not logged in!&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="266"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`data_settings`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;data_settings&quot;>File lists&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="267"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`selection_zone_setup`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;selection_zone_setup&quot;>Selection area&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="270"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_selection_zone_setup`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_selection_zone_setup&quot;>Customize the way files and folders are selected&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="271"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sel_onright`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sel_onright&quot;>Select on the right&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="272"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`show_confirm`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;show_confirm&quot;>Confirmations&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="273"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_show_confirm`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_show_confirm&quot;>Show a message after certain operations&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="274"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`filetypes_label`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;filetypes_label&quot;>Colors by type&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="276"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`editor_label`&quot; is not translated in &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;editor_label&quot;>Text Editor&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="277"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pictvw_label`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;pictvw_label&quot;>Picture Viewer&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="278"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`textvw_label`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;textvw_label&quot;>Text Viewer&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="279"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`perms_label`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;perms_label&quot;>chmod / chown&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="280"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`advanced`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;advanced&quot;>Advanced&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="281"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`advanced_settings`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;advanced_settings&quot;>Miscellaneous&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="282"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_advanced_settings`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_advanced_settings&quot;>Extra settings for advanced users&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="283"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`send_content`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;send_content&quot;>Send using content provider&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="284"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_send_content`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_send_content&quot;>Try to uncheck if your file sending application does not implement a content resolver&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="285"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`two_lines`&quot; is not translated in &quot;da&quot; (Danish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;two_lines&quot;>Two lines in a row&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="288"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`show_icons`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;show_icons&quot;>Enable icons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="290"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_show_icons`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_show_icons&quot;>Show file and folder icons instead of just text&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="291"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`toolbar_settings`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;toolbar_settings&quot;>Toolbar&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="292"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_toolbar_settings`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_toolbar_settings&quot;>Customize the toolbar at the bottom of the screen&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="293"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`show_hotkeys`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;show_hotkeys&quot;>Show hot keys&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="296"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_show_hotkeys`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_show_hotkeys&quot;>Show hot key shortcuts on certain buttons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="297"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`tblist_label`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;tblist_label&quot;>Customize the toolbar&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="300"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`show_root`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;show_root&quot;>Show root and mounts&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="305"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_show_root`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_show_root&quot;>Home view will display \&quot;Root mode\&quot; and \&quot;Mount points\&quot;&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="306"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`root_root`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;root_root&quot;>Automatic root mode&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="307"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_root_root`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_root_root&quot;>Switch to root mode when going to a device\&apos;s root folder&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="308"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`thumbnails`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;thumbnails&quot;>Enable thumbnails&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="309"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_thumbnails`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_thumbnails&quot;>Show thumbnails for images instead of icons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="310"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`thumbnails_size`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;thumbnails_size&quot;>Thumbnail size&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="311"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_thumbnails_size`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_thumbnails_size&quot;>Set the percentage value in relation to icon size&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="312"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_font_size`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_font_size&quot;>Set the font size&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="314"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sort_case`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sort_case&quot;>Ignore case in sorting&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="323"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_sort_case`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_sort_case&quot;>Check this to ignore case sensitivity in file and folder sorting&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="324"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`compatibility_settings`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;compatibility_settings&quot;>Hardware buttons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="327"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_compatibility_settings`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_compatibility_settings&quot;>Customize the overriding of hardware button functions&lt;/string> "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="328"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`panels_sliding`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;panels_sliding&quot;>Enable sliding gesture&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="329"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_panels_sliding`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_panels_sliding&quot;>Switch panels by a horizontal scroll gesture&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="330"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`volume_mode`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;volume_mode&quot;>Override volume buttons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="333"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_volume_mode`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_volume_mode&quot;>Volume buttons perform toggle/select&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="334"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`exit_on_back`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;exit_on_back&quot;>Back button exits&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="335"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_exit_on_back`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_exit_on_back&quot;>Back button closes the application&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="336"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`colors`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;colors&quot;>Colors&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="337"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_colors`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_colors&quot;>Modify background and foreground colors&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="338"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`bgr_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;bgr_color_picker&quot;>Background&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="339"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_bgr_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_bgr_color_picker&quot;>Choose a color for the main background&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="340"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fgr_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fgr_color_picker&quot;>Foreground&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="341"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_fgr_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_fgr_color_picker&quot;>Choose a color for file names and attributes&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="342"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cur_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cur_color_picker&quot;>Focused&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="343"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_cur_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_cur_color_picker&quot;>Choose a color for items in focus&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="344"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sel_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sel_color_picker&quot;>Selected background&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="345"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_sel_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_sel_color_picker&quot;>Choose a background color for selected files and the current panel\&apos;s title&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="346"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sfg_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sfg_color_picker&quot;>Selected foreground&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="347"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_sfg_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_sfg_color_picker&quot;>Choose a text color for selected files and the current panel\&apos;s title&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="348"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ttl_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;ttl_color_picker&quot;>Panel title&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="349"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_ttl_color_picker`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_ttl_color_picker&quot;>Choose a background color for the panel title&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="350"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`btn_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;btn_color_picker&quot;>Buttons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="351"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_btn_color_picker`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_btn_color_picker&quot;>Choose a background color for the buttons&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="352"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pick_color`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;pick_color&quot;>Set color&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="353"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`color`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;color&quot;>Color&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="354"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_language`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_language&quot;>Override the system language&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="356"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`restart_to_apply_lang`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;restart_to_apply_lang&quot;>Restart the application to apply the new language&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="357"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`busybox_location`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;busybox_location&quot;>Path to BusyBox&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="360"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_busybox_location`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_busybox_location&quot;>Specify the location of the BusyBox executable&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="361"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`su_location`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;su_location&quot;>Path to su&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="362"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_su_location`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_su_location&quot;>Specify the location of the su executable&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="363"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scan_all`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;scan_all&quot;>Scan all files&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="364"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`summary_scan_all`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;summary_scan_all&quot;>Uncheck to scan only media files&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="365"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`execute_command`&quot; is not translated in &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;execute_command&quot;>Execute a command&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="366"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`remind_to_save`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;remind_to_save&quot;>Don\&apos;t forget to save your changes&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="368"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`saved`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;saved&quot;>\&quot;%1$s\&quot; saved.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="369"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`not_saved`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;not_saved&quot;>Save changes?&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="370"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`save_as`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;save_as&quot;>Save as…&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="372"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`revert`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;revert&quot;>Revert&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="373"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`go_up`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;es&quot; (Spanish), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;go_up&quot;>Parent&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="375"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`go_top`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;go_top&quot;>Top&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="376"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`go_end`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;go_end&quot;>Bottom&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="377"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`go_next`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;go_next&quot;>Next&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="378"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`go_prev`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;go_prev&quot;>Previous&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="379"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rot_right`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rot_right&quot;>Rotate clockwise&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="380"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`rot_left`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;rot_left&quot;>Rotate counterclockwise&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="381"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`encoding_set`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;encoding_set&quot;>The encoding is set to \&quot;%1$s\&quot;, select reload. If you save it, the original encoding will be changed to the new one.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="383"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_open_dir`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_open_dir&quot;>\&quot;%1$s\&quot; is a directory&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="387"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`cant_view_empt`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;cant_view_empt&quot;>File \&quot;%1$s\&quot; is empty&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="388"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`nav_warn_cmt`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;nav_warn_cmt&quot;>Tap &quot;Cancel&quot; to go safely to the /sdcard folder, or tap &quot;Exit&quot; to close the application.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="392"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fav_added`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;fav_added&quot;>\&quot;%1$s\&quot; was added to your favorites&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="394"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`no_root`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;no_root&quot;>Not root?&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="395"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`manage`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;manage&quot;>Manage&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="396"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`shortcuts`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;shortcuts&quot;>Shortcuts&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="397"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pkg_name`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;pkg_name&quot;>Package name&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="398"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`version`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;version&quot;>Version&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="399"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`version_code`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;version_code&quot;>Version code&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="400"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`target_sdk`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;target_sdk&quot;>Target SDK&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="401"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`inst_date`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;inst_date&quot;>Date&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="402"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pkg_size`&quot; is not translated in &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;pkg_size&quot;>Size&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="403"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`process`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;process&quot;>Process name&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="404"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`app_class`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;app_class&quot;>App. class&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="405"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`affinity`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;affinity&quot;>Task Affinity&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="406"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`permissions`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;de&quot; (German), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;permissions&quot;>Permissions&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="407"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`flags`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;flags&quot;>Flags&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="408"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`not_exported`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;not_exported&quot;>Activity is not exported&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="409"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`smb_missed`&quot; is not translated in &quot;ko-KR&quot; (Korean: South Korea), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;smb_missed&quot;>Cannot load the Samba adapter: make sure the Ghost Commander SMB plugin is installed&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="410"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sftp_missed`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;sftp_missed&quot;>Cannot load the SFTP adapter: make sure the Ghost Commander SFTP plugin is installed.&lt;/string>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="411"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`license_text`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="&lt;string name=&quot;license_text&quot;>&lt;![CDATA["
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/strings.xml"
            line="515"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`plugins_uri`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;plugins_uri&quot;>market://search?q=pub:Ghost Squared&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`smb_app_uri`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;smb_app_uri&quot;>market://search?q=pname:com.ghostsq.commander.samba&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sftp_app_uri`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sftp_app_uri&quot;>market://search?q=pname:com.ghostsq.commander.sftp&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`donate_uri`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;donate_uri&quot;>https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=ghost.sq2@gmail.com&amp;amp;item_name=donate&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`help_uri`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;help_uri&quot;>http://sites.google.com/site/ghostcommander1/info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`value_editor_activity`&quot; is not translated in &quot;bg&quot; (Bulgarian), &quot;cs-CZ&quot; (Czech: Czech Republic), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;ja&quot; (Japanese), &quot;ko-KR&quot; (Korean: South Korea), &quot;pl&quot; (Polish), &quot;ru&quot; (Russian), &quot;zh-CN&quot; (Chinese: China), &quot;zh-TW&quot; (Chinese: Taiwan)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;value_editor_activity&quot;>com.ghostsq.commander.Editor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/andrew/AndroidStudioProjects/ghostcommander1/app/src/main/res/values/uris.xml"
            line="8"
            column="13"/>
    </issue>

</issues>
